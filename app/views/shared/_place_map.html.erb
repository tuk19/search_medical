
<div class="place_map_container">
  <h2>周辺の医療機関検索</h2>
  <div class="place_map_search_area">
    <input type="text" size="55" id="place_search">
    <input type="button" size="55" value="検索" id="place_search_button" onClick="SearchGo()">
  </div>
  <div id="place_map"></div>
</div>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GoogleMap_API_KEY'] %>&libraries=places"></script>
<script>
var myMap;
var service;

function initialize() {
  geocoder = new google.maps.Geocoder()
  let defaultAddress = document.getElementById('place_medicalstaff_address').textContent;
  geocoder.geocode( { 'address': defaultAddress}, function(results, status) {
    if (status == 'OK') {
      let lat = results[0].geometry.location.lat();
      let lng = results[0].geometry.location.lng();
      var initPos = new google.maps.LatLng(lat, lng);
      var myOptions = {
          zoom: 15,
          center: initPos,
      };
      myMap = new google.maps.Map(document.getElementById("place_map"), myOptions);
      var request = {
      location: initPos,
      radius: 1000,
      types: ['hospital']
      };
      var service = new google.maps.places.PlacesService(myMap);
      service.search(request, Result_Places);
    } else {
      alert('該当する結果がありませんでした：' + status);
    }
  });
}

// 検索結果を受け取る
function Result_Places(results, status){
    // Placesが検家に成功したかとマうかをチェック
    if(status == google.maps.places.PlacesServiceStatus.OK) {
        for (var i = 0; i < results.length; i++) {
            // 検索結果の数だけ反復処理を変数placeに格納
            var place = results[i];
            createMarker({
                 text : place.name,
                 position : place.geometry.location
            });
        }
    }
}

// 入力キーワードと表示範囲を設定
function SearchGo() {
    var initPos = new google.maps.LatLng(0,0);
    var mapOptions = {
        center : initPos,
        zoom: 0
    };
    // #map_canva要素にMapクラスの新しいインスタンスを作成
    myMap = new google.maps.Map(document.getElementById("place_map"), mapOptions);
    service = new google.maps.places.PlacesService(myMap);
    // input要素に入力されたキーワードを検索の条件に設定
    var myword = document.getElementById("place_search");
    var request = {
        query : myword.value,
        radius : 5000,
        location : myMap.getCenter()
    };
    service.textSearch(request, result_search);
}

// 検索の結果を受け取る
function result_search(results, status) {
    var bounds = new google.maps.LatLngBounds();
    for(var i = 0; i < results.length; i++){
        createMarker({
             position : results[i].geometry.location,
             text : results[i].name,
             map : myMap
         });
        bounds.extend(results[i].geometry.location);
    }
    myMap.fitBounds(bounds);
}

// 該当する位置にマーカーを表示
function createMarker(options) {
    // マップ情報を保持しているmyMapオブジェクトを指定
    options.map = myMap;
    // Markcrクラスのオブジェクトmarkerを作成
    var marker = new google.maps.Marker(options);
    // 各施設の吹き出し(情報ウインドウ)に表示させる処理
    var infoWnd = new google.maps.InfoWindow();
    infoWnd.setContent(options.text);
    // addListenerメソッドを使ってイベントリスナーを登録
    google.maps.event.addListener(marker, 'click', function(){
        infoWnd.open(myMap, marker);
    });
    return marker;
}

// ページ読み込み完了後、Googleマップを表示
google.maps.event.addDomListener(window, 'load', initialize);
</script>
